/*对未知是否识别html5的浏览器添加块级声明 */
 article, aside, dialog, figure, footer, header, legend, nav, section{display:block;} 
//属性选择器
[att=val]
[id=section1]{background-color: #eee;}//为所有ID为section1的元素添加背景色
[att^=val]
[id^=seciton]{background-color: #eee;}//为所有以section开头的ID的元素添加背景色
[att*=val]
[id*=section]{background-color: #eee;}//为所有含有section的ID的元素添加背景色
[att$=val]
[id$=section]{background-color: #eee;}//为所有以section结尾的ID的元素添加背景色
a[href$=\/]:after, a[href$=htm]:after, a[href$=html]:after{content:"web网页";}//为所有以/,\,thm,html结尾的超链接地址后添加文字内容
//结构性伪类选择器
a:link{color:red;}
a:visited{color:green;}
a:hover{color:blue;}
a:active{color:purple;}
//伪元素选择器
p:first-line{color:red;}//改变第一行颜色
p:first-letter{color:green;}//改变首字母或首文字颜色
li:before{content:".";}//每个li元素前添加.
li:after{content:"end";}//在每个li元素结尾插入end
//将样式绑定到页面的根元素中。根元素是指位于文档树种最顶层结构的元素，在HTML页面中就是指包含整个页面的<html>部分
:root{background-color: green;}//网页背景色问绿色
body{background-color: red;}//body里颜色为红色（不指定root属性时默认body颜色覆盖整个页面）
//body*语句指定背景为黄色，但在not(h1)语句中使用not选择器排除h1元素
body*:not(h1){background-color: yellow;}
//使用empty选择器指定当元素内容为空白时使用的样式
:empty{background-color: yellow;}//当内容为空时显示为黄色
//使用target选择器来对页面某个target元素(该元素的ID被当做页面中的超链接来使用)指定样式，该样式只在点击页面超链接并跳转到target元素后起作用
:target{background-color: yellow;}/*<a href="#text"></a> <div id="text"></div>跳转到ID为text的div时背景色变为yellow*/
//列表单独指定第一个子元素、最后一个子元素的样式
li:first-child{background-color: red;}//第一个子元素红色
li:last-child{background-color: green;}//最后一个子元素绿色
//对指定序号的子元素使用样式
li:nth-child(2){background-color: red;}//正数第二个红色
li:nth-last-child(2){background-color: blue;}//倒数第二个蓝色
//对所有第奇数个子元素或偶数个子元素使用样式
li:nth-child(odd){background-color: red;}
li:nth-child(even){background-color: blue;}
//非列表使用选择器nth-of-type
h2:nth-of-type(odd){background-color: yellow;}//h2标题奇数黄色
h2:nth-of-type(even){background-color: blue;}//h2标题偶数蓝色
h2:nth-last-of-type(2){background-color: black;}
//循环使用样式
li:nth-child(4n+1){background-color: red;}//每四个循环一次
li:nth-child(4n+2){background-color: white;}
li:nth-child(4n+3){background-color: blue;}
li:nth-child(4n+4){background-color: purple;}
//指定当某个父元素中只有一个子元素时才使用的样式
li:only-child{background-color: blue;}
li:only-of-type{background-color: blue;}
//UI元素状态伪类选择器
input[type="text"]:hover{background-color: red;}//文本框鼠标悬浮时显示红色
input[type="text"]:focus{background-color: yellow;}//文本框获得焦点时显示黄色
input[type="text"]:active{background-color: blue;}//文本框被激活时显示蓝色
input[type="text"]:enabled{background-color: red;}//文本框处于可用状态
input[type="text"]:disabled{background-color: orange;}//文本框处于不可用状态
input[type="text"]:read-only{background-color: blue;}//文本框处于只读状态
input[type="text"]:read-write{background-color: red;}//文本框处于非只读状态
input[type="text"]:-moz-read-only{background-color: yellow;}//firefox中
input[type="text"]:-moz-read-write{background-color: white;}//firefox中
input[type="checkbox"]:checked{background-color: red;}//指定当表单中的radio单选框或checkbox复选框处于选取状态时的样式
input[type="checkbox"]:default{background-color: yellow;}//指定当页面打开时默认处于选取状态的单选框或复选框控件的样式
//指定当页面打开时，如果一组单选框中任何一个单选框都没有被设定为选取状态时整组单选框的样式，选取后样式取消，目前只有opera支持
input[type="radio"]:indeterminate{background-color: blue;}
p::selection{background-color: red;}//元素处于选定状态时的样式
input[type="text"]::selection{background-color: yellow;}
//通用兄弟选择器
/* <子元素> ~ <子元素之后的同级兄弟元素> {指定样式} */
div ~ p {background-color: red;}//与div同级的p元素背景色变为红色
//使用选择器插入文字
h2:before{
	content: 'column';
	color: white;
	background-color: red;
}
h2.sample:before{
	content: none;//以sample为类的h2前不插入任何内容
}
//使用选择器插入图片
h1.new:after{content: url(new.gif);}//在以new为类的h1后插入图片
//使用content属性来插入项目编号
h1:before{content: counter(mycounter);}//在h1前插入编号
h1{counter-increment: mycounter;}//保证连续编号
h1:before{content: '第'counter(mycounter)'章';}
h1:before{
	content: counter(mycounter)'.';//在编号后加点
	color: blue;//追加样式
	font-size: 42px;
}
h1:before{content: counter(mycounter, upper-alpha)'.';}//编号为大写字母
//编号嵌套
h1:before{content: counter(mycounter);}//大标题编号连续
h1{counter-increment:mycounter;}
h2:before{content:counter(subcounter)'.';}
h2{counter-increment: counter(subcounter);}//小标题编号接大标题下的小标题编号
h1{counter-increment: mycounter; counter-reset: subcounter;}//h2标题重排
//编号多层嵌套
h1:before{content: counter(mycounter) '.';}//大标题1
h1{counter-increment: mycounter; counter-reset: subcounter;}
h2:before{content: counter(mycounter) '-' counter(subcounter) '.';}//中标题1-1
h2{counter-increment: subcounter; counter-reset: subsubcounter;}
h3:before{content: counter(mycounter) '-' counter(subcounter) '-' counter(subsubcounter) '.';}//小标题1-1-1
h3{counter-increment: subsubcounter;}
//在字符串两边添加嵌套文字符号
h1:before{content: open-quote;}
h1:after{content: close-quote;}
h1{quotes: "(" ")";}//h1内容左右添加括号，可换其他任意文字符号，但只有firefox和opera支持
//文字添加阴影
div{text-shadow:5px 5px 5px gray;}//text-shadow:横向距离，纵向距离，模糊半径，颜色
//指定多个阴影
div{text-shadow:1px 1px 1px #e332ee, 2px 2px 2px #eee443, 3px 3px 3px #aaaaaa;}
//文本自动换行
div{word-break: keep-all;}//只能在半角空格或连字符处换行
div{word-break: normal;}//使用浏览器默认换行规则
div{word-break: break-all;}//允许在单词内换行
//长单词和URL地址自动换行
div{word-wrap: break-word;}
//在网页上显示服务器端字体
@font-face{
	font-family: WebFont;//声明使用服务器端字体
	src: url('font/Fontin_Sans_R_45b.otf') format("opentype");//服务器端字体文件路径，字体文件格式为opentype
	font-weight: normal;
}
h1{font-family: WebFont;}
//显示客户端字体
@font-face{
	font-family: Arial;
	src: local('Arial');
}
@font-face{
	font-family: MyHelvetica;
	src: local("Helvetica Neue"),
	url(MgOpenModernaRegular.ttf);
}
//变换行内样式与块级样式
div{display: inline;}//div默认为块级样式，display属性变换为行内样式
span{display: block;}//span默认为行内样式，display属性变换为块级样式
//只有block类型元素可改变宽高，但同时使用行内样式时用block-inline
div.inlineblock{
	display: inline-block;
	width: 300px;
	height: 200px;
}
div.inline{
	display: inline;//不可用来改变宽高
	width: 300px;//不显示效果
}
//block-inline默认为垂直对齐，更改为顶部对齐
div.top{
	display: block-inline;
	vertical-align: top;
}
//float属性实现水平菜单
ul{margin: 0; padding: 0;}
li{
	padding: 10px 0;
	float: left;
	width: 100px;
	background-color: #deeeee;
	text-align: center;
	border: solid 1px #e22335;
}
//display-inline实现水平菜单
ul{margin: 0; padding: 0;}
li{
	padding: 10px 0;
	display: inline;
	width: 100px;
	background-color: #deeeee;
	text-align: center;
	border: solid 1px #e22335;
}
//使用inline-table将表格与文字归为一行
table{display: inline-table;}
//将多个元素作为列表来显示，同时在元素的开头加上列表的标记
div{
	display: list-item;//将div元素作为列表显示
	list-style-type: circle; //在元素开头加上一个空心小圆圈作为列表标记	
}
//超出容纳范围隐藏超出文字
div{
	overflow: hidden;
	width: 300px;
	height: 100px;
}
//超出部分显示超出文字
div{overflow: visible;}
//超出容纳范围改变成滚动轴显示
div{
	overflow: scroll;
	width: 300px;
	height: 100px;
}
div{
	overflow: auto;//自动判断超出部分是添加水平滚动条还是垂直滚动条
	width: 300px;
	height: 100px;
}
//只显示垂直方向的滚动条
div{
	overflow-x: hidden;
	overflow-y: scroll;
}
//仅当在水平方向超出范围时出现省略号
div{
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;//超出部分用省略号代替
}
//box-shadow: length length length color;阴影横向距离 纵向距离 模糊半径 阴影颜色(距离可为负值)
div{box-shadow: 10px 10px 10px gray;}
//盒周围环绕阴影
div{box-shadow: 0 0 10px gray;}
//盒内子元素阴影设置
span{box-shadow: 10px 10px 10px gray;}//span在div中
//第一个文字或第一行使用盒阴影
div:first-letter, div:first-line{box-shadow: 10px 10px 10px gray;}
//对表格和单元格施加阴影效果
table, td{box-shadow: 10px 10px 10px gray;}
//使用box-sizing属性来指定针对元素的宽度与高度的计算方法
div#div1{box-sizing: content-box;}//元素的宽度与高度不包括内部补白区域以及边框的宽度与高度，所以元素总宽度为300+30*2+30*2
div#div2{box-sizing: border-box;}//元素的宽度与高度包括内部补白区域以及边框的宽度与高度，所以元素总宽度为300－30*2-30*2
div#div3{box-sizing: padding-box;}//元素的宽度与高度包括内部补白区域，不包括边框的宽度与高度，所欲元素总宽度为300-30*2+30*2
div{padding: 30px; width: 300px; border: solid 30px #eeeeee;}
//盒并排显示
div{width: 50%; float: left; box-sizing: content-box;}//两个div会并排显示
//指定背景的显示范围
div{padding: 30px; border: dashed 15px green; background-color: black;}
div#div1{background-clip: border;}//border在背景内
div#div2{background-clip: padding;}//border在背景外
//指定绘制背景图像的绘制起点
div{background-image: url(flower.png); background-repeat: no-repeat;}
div#div1{background-origin: border;}//从边框左上角开始绘制
div#div2{background-origin: padding;}//从内部补白区域左上角开始绘制
div#div3{background-origin: content;}//从内容左上角开始绘制
//指定背景图像的尺寸
div{background-size: 30px 20px;}//background-size: 宽度 高度
div{background-size: auto 30px;}//宽度自适应
//在一个元素中显示多个背景图像
div{
	background-image: url(flower-red.png), url(flower-green.png), url(sky.png);
	background-repeat: no-repeat, repeat-x, no-repeat;
	background-position: 3%, 80%, 95%, center, center, top;//只设定一个百分比，另一个默认为50%
}
//绘制圆角边框
div{border: solid 5px blue; border-radius: 20px;}
//指定两个半径时，Chrome和Safari会绘制一个椭圆型边框，第一个半径为椭圆水平方向半径，第二个为垂直方向半径。
//在Firefox和Opera中将第一个半径作为边框左上角与右下角的圆半径来绘制，将第二个半径欧为边框右上角与左夏季哦啊的圆半径来绘制。
div{border: solid 5px blue; border-radius: 20px 30px;}
//不显示边框时将背景绘制为圆角
div{border:none; border-radius: 20px;}
//绘制四个角不同半径的圆角边框
div{
	border-top-left-radius:1em;
    border-top-right-radius:2em;
    border-bottom-right-radius:3em;
    border-bottom-left-radius:4em;
}
//使用图像边框,url(图像路径) A B C D border-width;四个参数表示当浏览器自动把边框所使用到的图像进行分割时的上边距、右边距、下边距、左边距。
div{border-image: url(borderimage.png) 20 20 20 20 / 20px;}
div{border-image: url(borderimage.png) 20 / 20px 15px 10px 10px;}
//使元素实现旋转
div{transform: rotate(45deg);}//顺时针旋转45度
//使元素实现缩放
div{transform: scale(0.5);}//缩小50%
div{transform: scale(0.5, 2);}//水平方向缩小50%，垂直方向放大一倍
//使元素实现倾斜
div{transform: skew(30deg, 30deg);}//水平方向倾斜30度，垂直方向倾斜30度
div{transform: skew(30deg);}//只在水平方向倾斜，垂直方向不倾斜
//使元素实现移动
div{transform: tanslate(50px, 50px);}//水平方向移动50px,垂直方向移动50px
div{transform: tanslate(50px);}//只在水平方向移动，垂直方向不移动
//多重变形示例
div{transform: translate(150px, 200px) rotate(45deg) scale(1.5);}
//指定变形基准点
div#div1{
	transform: rotate(45deg);
	transform-origin: left bottom;//以左下角为基准点旋转45度
}
//transition:property duration timing-function 动画过渡：需用动画过渡的属性 过渡时间 所用过渡方法
div{
	background-color: blue;
	transition: background-color 1s linear;
}
div{
	background-color: blue;
	color: yellow;
	width: 300px;
	transition: background-color 1s linear, color 1s linear, width 1s linear;
}
div:hover{
	background-color: red;
	color: gray;
    width:400px;
}
//使用transitions功能实现元素的移动与旋转动画
img{
	position: absolute;
	top: 70px;
	left: 0;
	transform: rotate(0);
	transition: left 1s linear, transform 1s linear;
}
div:hover img{
	position: absolute;
	left: 30px;
	transform: rotate(720deg);
}
//Animations功能的使用方法
div{background-color: red;}
@keyframes mycolor{
	0%{background-color: red;}
	40%{background-color: blue;}
	70%{background-color: yellow;}
	100%{background-color: red;}
}
div:hover{animation: mycolor 5s linear;}
//动画循环播放
div:hover{
	animation-name: mycolor;
	animation-duration: 5s;
	animation-timing-function: linear;
	animation-iteration-count: infinite;
}
//网页淡入淡出效果
@keyframes fadein{
	0%{opacity: 0; background-color: white;}
	100%{opacity: 1; background-color: white;}
}
body{
	animation-name: fadein;
	animation-duration: 5s;
	animation-timing-function: linear;
	animation-iteration-count: 1;
}
//多栏布局
div#div1{column-count: 2; width: 40em;}//多栏布局需要设定元素总宽度
div#div2{width: 100%; height: 200px; background-color: yellow;}
div#div3{
	column-count: 2; 
    column-width: 20em;//单独设置每一栏宽度
}
div#div4{
	column-count: 2;
	column-width: 20em;
	column-gap: 2em;//设定多栏之间的间隔
	column-rule: solid 1px red;//栏与栏之间添加分隔线
}
//盒布局
#container{display: box;}//container包含left-sidebar, contents, right-sidebar
#left-sidebar{
	padding: 20px; 
	width:200px;
	background-color: orange;
}
#contents{
	padding: 20px;
	box-flex: 1;//内容自适应
	background-color: yellow;
}
#right-sidebar{
	padding: 20px;
	width: 200px;
	background-color: green;
}
#left-sidebar, #contents, #right-sidebar{box-sizing: border-box;}
//改变元素的显示顺序
#container{display: box;}
#left-sidebar{
	padding: 20px;
	box-ordinal-group: 3;//按从左至右顺序第三个显示
	width: 200px;
	background-color: orange;
}
#contents{
	padding: 20px;
	ordinal-group: 1;//按从左至右顺序第一个显示
	box-flex:1;
	background-color: yellow;
}
#right-sidebar{
	padding: 20px;
	box-ordinal-group: 2;//按从左至右顺序第二个显示
	width: 200px;
    background-color: blue;
}
#left-sidebar, #contents, #right-sidebar{box-sizing: border-box;}
//改变元素的排列方向
#container{
	display: box;
	box-orient: vertical;//由水平排列改变为垂直排列
}
#left-sidebar{
	padding: 20px;
	box-ordinal-group: 3;
	width: 200px;
	background-color: orange;
}
#contents{
	padding: 20px;
	box-ordinal-group: 1;
	box-flex: 1;
	background-color: yellow;
}
#right-sidebar{
	padding: 20px;
	box-ordinal-group: 2;
	width: 200px;
	background-color: green;
}
#left-sidebar, #contents, #right-sidebar{box-sizing:border-box;}
//对多个元素使用box-flex属性
#container{
	display: box;
	box-orient: vertical;
	width: 500px;
	height: 200px;
	border: solid 5px blue;
}
#text-a{
	box-flex: 2;//将空白部分四等分（1+1+2），占两份
	background-color: orange;
}
#text-b{
	box-flex:1;//将空白部分四等分，占一份
	background-color: yellow;
}
#text-c{
	box-flex: 1;//将空白部分四等分，占一份
	background-color: green;
}
#text-a, #text-b, #text-c{
	box-sizing: border-box;
	font-size: 1.5em;
	font-weight: bold;
}
//指定水平方向与垂直方向的对齐方式
div{
	display: box;
	box-align: start;//顶部对齐，文字、图像或子元素被放置在元素最顶部
	box-pack: start;//左对齐，文字、图像或子元素被放置在元素最左边
	width: 300px;
	height: 200px;
	background-color: purple;
}
//媒体查询
body{margin:20px 0;}
#container{margin: auto; width: 960px;}
#wrapper{float: left; width: 740px;}
p{
	margin: 0 0 20px 0;
	line-height: 600px;
	text-align: center;
	font-weight: bold;
	font-size: 2em;
}
#main{
	float: right;
	width: 520px;
	background-color: yellow;
}
#sub01{
	float: left;;
	width: 200px;
	background-color: orange;
}
#sub02{
	float: right;
	width: 200px;
	background-color: green;
}
/* 窗口宽度在1000px以上 */
@media screen and (min-width: 1000px) {
	/* 三栏显示 */
	#container{width:1000px;}
	#wrapper{float: left; width: 780px;}
	#main{float: right; width: 560px;}
	#sub01{float: left; width: 200px;}
	#sub02{float: right; width: 200px;}
}
/* 窗口宽度在640px以上，999px以下 */
@media screen and (min-width:640px) and (max-width: 999px) {
	/* 两栏显示 */
	#container{width: 640px;}
	#wrapper{float: none; width: 640px;}
	p{line-height: 400px;}
	#main{float: right; width: 420px;}
	#sub01{float: left; width: 200px;}
	#sub02{
		float: none;
		clear: both;
		width: 100%;
		line-height: 150px;
	}
}
/* 窗口宽度在639px以下 */
@media screen and (max-width: 639px) {
	/* 一栏显示 */
	#container{width: 100%;}
	#wrapper{float: none; width:100%;}
	body{margin:20px;}
	p{line-height: 300px;}
	#main{float: none; width: 100%;}
	#sub01{
		float: none;
		width: 100%;
		line-height: 100px;
	}
	#sub02{
		float: none;
		width: 100%;
		line-height: 100px;
	}
}
//使用多条语句来将同一个样式应用于不同设备类型和设备特性中
@media handheld and (min-width: 360px), screen and (min-width: 480px){width: 200px;}
//对not后面的语句执行取反操作，样式代码将被使用在除便携设备之外的其他设备或非彩色便携设备中
@media not handheld and (color) {width: 200px;}
//样式代码将被使用在所有非彩色设备中
@media all and (not color){width: 200px;}
//only关键字的作用是让那些不支持Media Queries但是能够读取Media Type的设备的浏览器将表达式中的样式隐藏起来
@media only screen and (color){width: 200px;}
//css3中Media Queries模块中也支持对外部样式列表的引用
@import url(color.css) screen and( min-width:1000px);
//alpha通道与opacity属性结合使用的示例
div#div1{color: rgba(255, 255,255,0.5); background-color: rgba(255, 0, 0,0.1);}//可以为每个元素属性设定透明值
div#div2{color: rgb(255, 255, 255); background-color: rgb(255, 0, 0); opacity: 0.1;}//只能统一设定透明值
//transparent将元素颜色设为完全透明，相当于使用了值为0的alpha通道
div{
	color: transparent;
	border-color: transparent;
	background-color: transparent;
}
//outline属性用来在元素周围绘制一条轮廓线，起到突出元素作用。
input#male{outline: thin solid red;}//在ID为male的单选按钮外加一圈红色轮廓线
//轮廓线偏移
div{
	border: blue solid thin;
	outline: red solid thin;
	outline-offset: 2px;//轮廓线外偏移2px
	outline-offset:-2px;//轮廓线内偏移2px
}
//resize允许用户通过拖动的方式来修改元素的尺寸
#div{
	resize:none;//用户不能修改元素尺寸
	resize:both;//用户可以修改元素的宽度和高度
    resize:horizontal;//用户只可以修改元素宽度
    resize:vertical;//用户只可以修改元素高度
    resize:inherit;//继承父元素的resize属性值
}
//initial属性取消对元素的样式指定
p{color: blue; font-family: 宋体;}
p#text1{color: initial; font-family: 宋体;}//颜色还原为黑色







































